/* tslint:disable */
/* eslint-disable */
/**
 * Individual Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'individualId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'content'?: string;
}
/**
 * 
 * @export
 * @interface AddressInput
 */
export interface AddressInput {
    /**
     * 
     * @type {string}
     * @memberof AddressInput
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressInput
     */
    'individualId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressInput
     */
    'street'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressInput
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressInput
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressInput
     */
    'zipCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressInput
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressInput
     */
    'addressee'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressInput
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressInput
     */
    'email'?: string;
    /**
     * 
     * @type {{ [key: string]: Tag; }}
     * @memberof AddressInput
     */
    'tags'?: { [key: string]: Tag; };
}
/**
 * 
 * @export
 * @interface AddressOutput
 */
export interface AddressOutput {
    /**
     * 
     * @type {string}
     * @memberof AddressOutput
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressOutput
     */
    'individualId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressOutput
     */
    'street'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressOutput
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressOutput
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressOutput
     */
    'zipCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressOutput
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressOutput
     */
    'addressee'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressOutput
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressOutput
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface GetCurrentUserInfo200Response
 */
export interface GetCurrentUserInfo200Response {
    /**
     * Unique identifier for the user
     * @type {string}
     * @memberof GetCurrentUserInfo200Response
     */
    'UserID'?: string;
    /**
     * Unique identifier for the individual
     * @type {string}
     * @memberof GetCurrentUserInfo200Response
     */
    'IndividualID'?: string;
}
/**
 * 
 * @export
 * @interface Individual
 */
export interface Individual {
    /**
     * 
     * @type {string}
     * @memberof Individual
     */
    'id'?: string;
    /**
     * 
     * @type {{ [key: string]: Address; }}
     * @memberof Individual
     */
    'addresses'?: { [key: string]: Address; };
    /**
     * 
     * @type {{ [key: string]: Tag; }}
     * @memberof Individual
     */
    'tags'?: { [key: string]: Tag; };
}
/**
 * 
 * @export
 * @interface IndividualInput
 */
export interface IndividualInput {
    /**
     * 
     * @type {Array<AddressInput>}
     * @memberof IndividualInput
     */
    'newaddresses'?: Array<AddressInput>;
}
/**
 * 
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     * The name of the tag
     * @type {string}
     * @memberof Tag
     */
    'Name'?: string;
    /**
     * 
     * @type {TagValue}
     * @memberof Tag
     */
    'Value'?: TagValue;
    /**
     * Whether the tag is private
     * @type {boolean}
     * @memberof Tag
     */
    'Private'?: boolean;
    /**
     * Whether the tag is required
     * @type {boolean}
     * @memberof Tag
     */
    'Required'?: boolean;
    /**
     * Whether the tag is editable
     * @type {boolean}
     * @memberof Tag
     */
    'Editable'?: boolean;
}
/**
 * @type TagValue
 * The value of the tag
 * @export
 */
export type TagValue = boolean | number | string;


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new individual
         * @param {IndividualInput} individualInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIndividual: async (individualInput: IndividualInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'individualInput' is not null or undefined
            assertParamExists('createIndividual', 'individualInput', individualInput)
            const localVarPath = `/individuals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(individualInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a specific address for an individual by ID and address ID
         * @param {string} addressId ID of the address
         * @param {string} beneficiaryToken Beneficiary token for authorization
         * @param {string} beneficiaryId Beneficiary id for authorization
         * @param {string} [individualId] individualId id for authorization in case of owner tokem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAddressByID: async (addressId: string, beneficiaryToken: string, beneficiaryId: string, individualId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addressId' is not null or undefined
            assertParamExists('deleteAddressByID', 'addressId', addressId)
            // verify required parameter 'beneficiaryToken' is not null or undefined
            assertParamExists('deleteAddressByID', 'beneficiaryToken', beneficiaryToken)
            // verify required parameter 'beneficiaryId' is not null or undefined
            assertParamExists('deleteAddressByID', 'beneficiaryId', beneficiaryId)
            const localVarPath = `/addresses/{addressId}`
                .replace(`{${"addressId"}}`, encodeURIComponent(String(addressId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (beneficiaryToken !== undefined) {
                localVarQueryParameter['beneficiary_token'] = beneficiaryToken;
            }

            if (beneficiaryId !== undefined) {
                localVarQueryParameter['beneficiaryId'] = beneficiaryId;
            }

            if (individualId !== undefined) {
                localVarQueryParameter['individualId'] = individualId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an individual by ID
         * @param {string} id ID of the individual
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIndividualByID: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteIndividualByID', 'id', id)
            const localVarPath = `/individuals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a specific address for an individual by ID and address ID
         * @param {string} addressId ID of the address
         * @param {string} beneficiaryToken Beneficiary token for authorization
         * @param {string} beneficiaryId Beneficiary id for authorization
         * @param {string} [individualId] individualId id for authorization in case of owner tokem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddressByID: async (addressId: string, beneficiaryToken: string, beneficiaryId: string, individualId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addressId' is not null or undefined
            assertParamExists('getAddressByID', 'addressId', addressId)
            // verify required parameter 'beneficiaryToken' is not null or undefined
            assertParamExists('getAddressByID', 'beneficiaryToken', beneficiaryToken)
            // verify required parameter 'beneficiaryId' is not null or undefined
            assertParamExists('getAddressByID', 'beneficiaryId', beneficiaryId)
            const localVarPath = `/addresses/{addressId}`
                .replace(`{${"addressId"}}`, encodeURIComponent(String(addressId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (beneficiaryToken !== undefined) {
                localVarQueryParameter['beneficiary_token'] = beneficiaryToken;
            }

            if (beneficiaryId !== undefined) {
                localVarQueryParameter['beneficiaryId'] = beneficiaryId;
            }

            if (individualId !== undefined) {
                localVarQueryParameter['individualId'] = individualId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves userinfo in JSON format
         * @summary Retrieve Userinfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserInfo: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/userinfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an individual by ID
         * @param {string} id ID of the individual
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndividualByID: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getIndividualByID', 'id', id)
            const localVarPath = `/individuals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of all individuals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndividuals: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/individuals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing address for an individual by ID and address ID
         * @param {string} addressId ID of the address
         * @param {string} beneficiaryToken Beneficiary token for authorization
         * @param {string} beneficiaryId Beneficiary id for authorization
         * @param {AddressInput} addressInput Address data to be updated
         * @param {string} [individualId] individualId id for authorization in case of owner tokem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddressByID: async (addressId: string, beneficiaryToken: string, beneficiaryId: string, addressInput: AddressInput, individualId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addressId' is not null or undefined
            assertParamExists('updateAddressByID', 'addressId', addressId)
            // verify required parameter 'beneficiaryToken' is not null or undefined
            assertParamExists('updateAddressByID', 'beneficiaryToken', beneficiaryToken)
            // verify required parameter 'beneficiaryId' is not null or undefined
            assertParamExists('updateAddressByID', 'beneficiaryId', beneficiaryId)
            // verify required parameter 'addressInput' is not null or undefined
            assertParamExists('updateAddressByID', 'addressInput', addressInput)
            const localVarPath = `/addresses/{addressId}`
                .replace(`{${"addressId"}}`, encodeURIComponent(String(addressId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (beneficiaryToken !== undefined) {
                localVarQueryParameter['beneficiary_token'] = beneficiaryToken;
            }

            if (beneficiaryId !== undefined) {
                localVarQueryParameter['beneficiaryId'] = beneficiaryId;
            }

            if (individualId !== undefined) {
                localVarQueryParameter['individualId'] = individualId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addressInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an individual by ID
         * @param {string} id ID of the individual
         * @param {IndividualInput} individualInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIndividualByID: async (id: string, individualInput: IndividualInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateIndividualByID', 'id', id)
            // verify required parameter 'individualInput' is not null or undefined
            assertParamExists('updateIndividualByID', 'individualInput', individualInput)
            const localVarPath = `/individuals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(individualInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new individual
         * @param {IndividualInput} individualInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIndividual(individualInput: IndividualInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createIndividual(individualInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createIndividual']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a specific address for an individual by ID and address ID
         * @param {string} addressId ID of the address
         * @param {string} beneficiaryToken Beneficiary token for authorization
         * @param {string} beneficiaryId Beneficiary id for authorization
         * @param {string} [individualId] individualId id for authorization in case of owner tokem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAddressByID(addressId: string, beneficiaryToken: string, beneficiaryId: string, individualId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAddressByID(addressId, beneficiaryToken, beneficiaryId, individualId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteAddressByID']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete an individual by ID
         * @param {string} id ID of the individual
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIndividualByID(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIndividualByID(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteIndividualByID']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a specific address for an individual by ID and address ID
         * @param {string} addressId ID of the address
         * @param {string} beneficiaryToken Beneficiary token for authorization
         * @param {string} beneficiaryId Beneficiary id for authorization
         * @param {string} [individualId] individualId id for authorization in case of owner tokem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAddressByID(addressId: string, beneficiaryToken: string, beneficiaryId: string, individualId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressInput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAddressByID(addressId, beneficiaryToken, beneficiaryId, individualId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAddressByID']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves userinfo in JSON format
         * @summary Retrieve Userinfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUserInfo(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCurrentUserInfo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUserInfo(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getCurrentUserInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get an individual by ID
         * @param {string} id ID of the individual
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIndividualByID(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Individual>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIndividualByID(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getIndividualByID']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a list of all individuals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIndividuals(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Individual>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIndividuals(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getIndividuals']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update an existing address for an individual by ID and address ID
         * @param {string} addressId ID of the address
         * @param {string} beneficiaryToken Beneficiary token for authorization
         * @param {string} beneficiaryId Beneficiary id for authorization
         * @param {AddressInput} addressInput Address data to be updated
         * @param {string} [individualId] individualId id for authorization in case of owner tokem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAddressByID(addressId: string, beneficiaryToken: string, beneficiaryId: string, addressInput: AddressInput, individualId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAddressByID(addressId, beneficiaryToken, beneficiaryId, addressInput, individualId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateAddressByID']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update an individual by ID
         * @param {string} id ID of the individual
         * @param {IndividualInput} individualInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIndividualByID(id: string, individualInput: IndividualInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateIndividualByID(id, individualInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateIndividualByID']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new individual
         * @param {IndividualInput} individualInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIndividual(individualInput: IndividualInput, options?: any): AxiosPromise<void> {
            return localVarFp.createIndividual(individualInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a specific address for an individual by ID and address ID
         * @param {string} addressId ID of the address
         * @param {string} beneficiaryToken Beneficiary token for authorization
         * @param {string} beneficiaryId Beneficiary id for authorization
         * @param {string} [individualId] individualId id for authorization in case of owner tokem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAddressByID(addressId: string, beneficiaryToken: string, beneficiaryId: string, individualId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAddressByID(addressId, beneficiaryToken, beneficiaryId, individualId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an individual by ID
         * @param {string} id ID of the individual
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIndividualByID(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteIndividualByID(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a specific address for an individual by ID and address ID
         * @param {string} addressId ID of the address
         * @param {string} beneficiaryToken Beneficiary token for authorization
         * @param {string} beneficiaryId Beneficiary id for authorization
         * @param {string} [individualId] individualId id for authorization in case of owner tokem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddressByID(addressId: string, beneficiaryToken: string, beneficiaryId: string, individualId?: string, options?: any): AxiosPromise<AddressInput> {
            return localVarFp.getAddressByID(addressId, beneficiaryToken, beneficiaryId, individualId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves userinfo in JSON format
         * @summary Retrieve Userinfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserInfo(options?: any): AxiosPromise<GetCurrentUserInfo200Response> {
            return localVarFp.getCurrentUserInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an individual by ID
         * @param {string} id ID of the individual
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndividualByID(id: string, options?: any): AxiosPromise<Individual> {
            return localVarFp.getIndividualByID(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of all individuals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndividuals(options?: any): AxiosPromise<Array<Individual>> {
            return localVarFp.getIndividuals(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing address for an individual by ID and address ID
         * @param {string} addressId ID of the address
         * @param {string} beneficiaryToken Beneficiary token for authorization
         * @param {string} beneficiaryId Beneficiary id for authorization
         * @param {AddressInput} addressInput Address data to be updated
         * @param {string} [individualId] individualId id for authorization in case of owner tokem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddressByID(addressId: string, beneficiaryToken: string, beneficiaryId: string, addressInput: AddressInput, individualId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.updateAddressByID(addressId, beneficiaryToken, beneficiaryId, addressInput, individualId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an individual by ID
         * @param {string} id ID of the individual
         * @param {IndividualInput} individualInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIndividualByID(id: string, individualInput: IndividualInput, options?: any): AxiosPromise<void> {
            return localVarFp.updateIndividualByID(id, individualInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Create a new individual
     * @param {IndividualInput} individualInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createIndividual(individualInput: IndividualInput, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createIndividual(individualInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a specific address for an individual by ID and address ID
     * @param {string} addressId ID of the address
     * @param {string} beneficiaryToken Beneficiary token for authorization
     * @param {string} beneficiaryId Beneficiary id for authorization
     * @param {string} [individualId] individualId id for authorization in case of owner tokem
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteAddressByID(addressId: string, beneficiaryToken: string, beneficiaryId: string, individualId?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteAddressByID(addressId, beneficiaryToken, beneficiaryId, individualId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an individual by ID
     * @param {string} id ID of the individual
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteIndividualByID(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteIndividualByID(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a specific address for an individual by ID and address ID
     * @param {string} addressId ID of the address
     * @param {string} beneficiaryToken Beneficiary token for authorization
     * @param {string} beneficiaryId Beneficiary id for authorization
     * @param {string} [individualId] individualId id for authorization in case of owner tokem
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAddressByID(addressId: string, beneficiaryToken: string, beneficiaryId: string, individualId?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAddressByID(addressId, beneficiaryToken, beneficiaryId, individualId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves userinfo in JSON format
     * @summary Retrieve Userinfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCurrentUserInfo(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCurrentUserInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an individual by ID
     * @param {string} id ID of the individual
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getIndividualByID(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getIndividualByID(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of all individuals
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getIndividuals(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getIndividuals(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing address for an individual by ID and address ID
     * @param {string} addressId ID of the address
     * @param {string} beneficiaryToken Beneficiary token for authorization
     * @param {string} beneficiaryId Beneficiary id for authorization
     * @param {AddressInput} addressInput Address data to be updated
     * @param {string} [individualId] individualId id for authorization in case of owner tokem
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateAddressByID(addressId: string, beneficiaryToken: string, beneficiaryId: string, addressInput: AddressInput, individualId?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateAddressByID(addressId, beneficiaryToken, beneficiaryId, addressInput, individualId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an individual by ID
     * @param {string} id ID of the individual
     * @param {IndividualInput} individualInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateIndividualByID(id: string, individualInput: IndividualInput, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateIndividualByID(id, individualInput, options).then((request) => request(this.axios, this.basePath));
    }
}



